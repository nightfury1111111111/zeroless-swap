/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type RewardScalingStruct = {
  floor: BigNumberish;
  ceiling: BigNumberish;
  time: BigNumberish;
};

export type RewardScalingStructOutput = [BigNumber, BigNumber, BigNumber] & {
  floor: BigNumber;
  ceiling: BigNumber;
  time: BigNumber;
};

export type StakeDataStruct = { amount: BigNumberish; timestamp: BigNumberish };

export type StakeDataStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  timestamp: BigNumber;
};

export type RewardOutputStruct = {
  lastStakeAmount: BigNumberish;
  newStakesCount: BigNumberish;
  reward: BigNumberish;
  newTotalStakeUnits: BigNumberish;
};

export type RewardOutputStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lastStakeAmount: BigNumber;
  newStakesCount: BigNumber;
  reward: BigNumber;
  newTotalStakeUnits: BigNumber;
};

export type RewardScheduleStruct = {
  duration: BigNumberish;
  start: BigNumberish;
  shares: BigNumberish;
};

export type RewardScheduleStructOutput = [BigNumber, BigNumber, BigNumber] & {
  duration: BigNumber;
  start: BigNumber;
  shares: BigNumber;
};

export type AludelDataStruct = {
  stakingToken: string;
  rewardToken: string;
  rewardPool: string;
  rewardScaling: RewardScalingStruct;
  rewardSharesOutstanding: BigNumberish;
  totalStake: BigNumberish;
  totalStakeUnits: BigNumberish;
  lastUpdate: BigNumberish;
  rewardSchedules: RewardScheduleStruct[];
};

export type AludelDataStructOutput = [
  string,
  string,
  string,
  RewardScalingStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  RewardScheduleStructOutput[]
] & {
  stakingToken: string;
  rewardToken: string;
  rewardPool: string;
  rewardScaling: RewardScalingStructOutput;
  rewardSharesOutstanding: BigNumber;
  totalStake: BigNumber;
  totalStakeUnits: BigNumber;
  lastUpdate: BigNumber;
  rewardSchedules: RewardScheduleStructOutput[];
};

export type VaultDataStruct = {
  totalStake: BigNumberish;
  stakes: StakeDataStruct[];
};

export type VaultDataStructOutput = [BigNumber, StakeDataStructOutput[]] & {
  totalStake: BigNumber;
  stakes: StakeDataStructOutput[];
};

export interface OhmLusdCrucibleInterface extends ethers.utils.Interface {
  functions: {
    "BASE_SHARES_PER_WEI()": FunctionFragment;
    "MAX_REWARD_TOKENS()": FunctionFragment;
    "MAX_STAKES_PER_VAULT()": FunctionFragment;
    "calculateReward(uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": FunctionFragment;
    "calculateRewardFromStakes((uint256,uint256)[],uint256,uint256,uint256,uint256,(uint256,uint256,uint256))": FunctionFragment;
    "calculateStakeUnits(uint256,uint256,uint256)": FunctionFragment;
    "calculateTotalStakeUnits((uint256,uint256)[],uint256)": FunctionFragment;
    "calculateUnlockedRewards((uint256,uint256,uint256)[],uint256,uint256,uint256)": FunctionFragment;
    "fund(uint256,uint256)": FunctionFragment;
    "getAludelData()": FunctionFragment;
    "getBonusTokenAtIndex(uint256)": FunctionFragment;
    "getBonusTokenSetLength()": FunctionFragment;
    "getCurrentStakeReward(address,uint256)": FunctionFragment;
    "getCurrentTotalStakeUnits()": FunctionFragment;
    "getCurrentUnlockedRewards()": FunctionFragment;
    "getCurrentVaultReward(address)": FunctionFragment;
    "getCurrentVaultStakeUnits(address)": FunctionFragment;
    "getFutureStakeReward(address,uint256,uint256)": FunctionFragment;
    "getFutureTotalStakeUnits(uint256)": FunctionFragment;
    "getFutureUnlockedRewards(uint256)": FunctionFragment;
    "getFutureVaultReward(address,uint256)": FunctionFragment;
    "getFutureVaultStakeUnits(address,uint256)": FunctionFragment;
    "getPowerController()": FunctionFragment;
    "getPowerSwitch()": FunctionFragment;
    "getVaultData(address)": FunctionFragment;
    "getVaultFactoryAtIndex(uint256)": FunctionFragment;
    "getVaultFactorySetLength()": FunctionFragment;
    "isOffline()": FunctionFragment;
    "isOnline()": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "isValidAddress(address)": FunctionFragment;
    "isValidVault(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rageQuit()": FunctionFragment;
    "registerBonusToken(address)": FunctionFragment;
    "registerVaultFactory(address)": FunctionFragment;
    "removeVaultFactory(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueTokensFromRewardPool(address,address,uint256)": FunctionFragment;
    "stake(address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeAndClaim(address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASE_SHARES_PER_WEI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_STAKES_PER_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      RewardScalingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardFromStakes",
    values: [
      StakeDataStruct[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      RewardScalingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakeUnits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalStakeUnits",
    values: [StakeDataStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnlockedRewards",
    values: [RewardScheduleStruct[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAludelData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusTokenSetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStakeReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTotalStakeUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUnlockedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVaultReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVaultStakeUnits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureStakeReward",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureTotalStakeUnits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureUnlockedRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureVaultReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureVaultStakeUnits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerSwitch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactoryAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactorySetLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOffline", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOnline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rageQuit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBonusToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokensFromRewardPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAndClaim",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_SHARES_PER_WEI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STAKES_PER_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardFromStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnlockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAludelData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusTokenSetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTotalStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUnlockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVaultReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVaultStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureTotalStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureUnlockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureVaultReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureVaultStakeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactoryAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactorySetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOffline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOnline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rageQuit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBonusToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokensFromRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAndClaim",
    data: BytesLike
  ): Result;

  events: {
    "AludelCreated(address,address)": EventFragment;
    "AludelFunded(uint256,uint256)": EventFragment;
    "BonusTokenRegistered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "VaultFactoryRegistered(address)": EventFragment;
    "VaultFactoryRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AludelCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AludelFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BonusTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultFactoryRemoved"): EventFragment;
}

export type AludelCreatedEvent = TypedEvent<
  [string, string],
  { rewardPool: string; powerSwitch: string }
>;

export type AludelCreatedEventFilter = TypedEventFilter<AludelCreatedEvent>;

export type AludelFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amount: BigNumber; duration: BigNumber }
>;

export type AludelFundedEventFilter = TypedEventFilter<AludelFundedEvent>;

export type BonusTokenRegisteredEvent = TypedEvent<[string], { token: string }>;

export type BonusTokenRegisteredEventFilter =
  TypedEventFilter<BonusTokenRegisteredEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  { vault: string; token: string; amount: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber],
  { vault: string; amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  { vault: string; amount: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type VaultFactoryRegisteredEvent = TypedEvent<
  [string],
  { factory: string }
>;

export type VaultFactoryRegisteredEventFilter =
  TypedEventFilter<VaultFactoryRegisteredEvent>;

export type VaultFactoryRemovedEvent = TypedEvent<
  [string],
  { factory: string }
>;

export type VaultFactoryRemovedEventFilter =
  TypedEventFilter<VaultFactoryRemovedEvent>;

export interface OhmLusdCrucible extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OhmLusdCrucibleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_SHARES_PER_WEI(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_STAKES_PER_VAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateReward(
      unlockedRewards: BigNumberish,
      stakeAmount: BigNumberish,
      stakeDuration: BigNumberish,
      totalStakeUnits: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    calculateRewardFromStakes(
      stakes: StakeDataStruct[],
      unstakeAmount: BigNumberish,
      unlockedRewards: BigNumberish,
      totalStakeUnits: BigNumberish,
      timestamp: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<[RewardOutputStructOutput] & { out: RewardOutputStructOutput }>;

    calculateStakeUnits(
      amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakeUnits: BigNumber }>;

    calculateTotalStakeUnits(
      stakes: StakeDataStruct[],
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStakeUnits: BigNumber }>;

    calculateUnlockedRewards(
      rewardSchedules: RewardScheduleStruct[],
      rewardBalance: BigNumberish,
      sharesOutstanding: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unlockedRewards: BigNumber }>;

    fund(
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAludelData(
      overrides?: CallOverrides
    ): Promise<[AludelDataStructOutput] & { aludel: AludelDataStructOutput }>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { bonusToken: string }>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    getCurrentStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getCurrentTotalStakeUnits(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStakeUnits: BigNumber }>;

    getCurrentUnlockedRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unlockedRewards: BigNumber }>;

    getCurrentVaultReward(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getCurrentVaultStakeUnits(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakeUnits: BigNumber }>;

    getFutureStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getFutureTotalStakeUnits(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStakeUnits: BigNumber }>;

    getFutureUnlockedRewards(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unlockedRewards: BigNumber }>;

    getFutureVaultReward(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getFutureVaultStakeUnits(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakeUnits: BigNumber }>;

    getPowerController(
      overrides?: CallOverrides
    ): Promise<[string] & { controller: string }>;

    getPowerSwitch(
      overrides?: CallOverrides
    ): Promise<[string] & { powerSwitch: string }>;

    getVaultData(
      vault: string,
      overrides?: CallOverrides
    ): Promise<[VaultDataStructOutput] & { vaultData: VaultDataStructOutput }>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { factory: string }>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    isOffline(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isOnline(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isShutdown(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    isValidVault(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { validity: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeAndClaim(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_SHARES_PER_WEI(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_STAKES_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

  calculateReward(
    unlockedRewards: BigNumberish,
    stakeAmount: BigNumberish,
    stakeDuration: BigNumberish,
    totalStakeUnits: BigNumberish,
    rewardScaling: RewardScalingStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardFromStakes(
    stakes: StakeDataStruct[],
    unstakeAmount: BigNumberish,
    unlockedRewards: BigNumberish,
    totalStakeUnits: BigNumberish,
    timestamp: BigNumberish,
    rewardScaling: RewardScalingStruct,
    overrides?: CallOverrides
  ): Promise<RewardOutputStructOutput>;

  calculateStakeUnits(
    amount: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalStakeUnits(
    stakes: StakeDataStruct[],
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnlockedRewards(
    rewardSchedules: RewardScheduleStruct[],
    rewardBalance: BigNumberish,
    sharesOutstanding: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fund(
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAludelData(overrides?: CallOverrides): Promise<AludelDataStructOutput>;

  getBonusTokenAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentStakeReward(
    vault: string,
    stakeAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentTotalStakeUnits(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentUnlockedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentVaultReward(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentVaultStakeUnits(
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFutureStakeReward(
    vault: string,
    stakeAmount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFutureTotalStakeUnits(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFutureUnlockedRewards(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFutureVaultReward(
    vault: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFutureVaultStakeUnits(
    vault: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerController(overrides?: CallOverrides): Promise<string>;

  getPowerSwitch(overrides?: CallOverrides): Promise<string>;

  getVaultData(
    vault: string,
    overrides?: CallOverrides
  ): Promise<VaultDataStructOutput>;

  getVaultFactoryAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

  isOffline(overrides?: CallOverrides): Promise<boolean>;

  isOnline(overrides?: CallOverrides): Promise<boolean>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

  isValidVault(target: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  rageQuit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBonusToken(
    bonusToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerVaultFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVaultFactory(
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokensFromRewardPool(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    vault: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeAndClaim(
    vault: string,
    amount: BigNumberish,
    permission: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_SHARES_PER_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKES_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateReward(
      unlockedRewards: BigNumberish,
      stakeAmount: BigNumberish,
      stakeDuration: BigNumberish,
      totalStakeUnits: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardFromStakes(
      stakes: StakeDataStruct[],
      unstakeAmount: BigNumberish,
      unlockedRewards: BigNumberish,
      totalStakeUnits: BigNumberish,
      timestamp: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<RewardOutputStructOutput>;

    calculateStakeUnits(
      amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalStakeUnits(
      stakes: StakeDataStruct[],
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnlockedRewards(
      rewardSchedules: RewardScheduleStruct[],
      rewardBalance: BigNumberish,
      sharesOutstanding: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fund(
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAludelData(overrides?: CallOverrides): Promise<AludelDataStructOutput>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTotalStakeUnits(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentUnlockedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVaultReward(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVaultStakeUnits(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureTotalStakeUnits(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureUnlockedRewards(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureVaultReward(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureVaultStakeUnits(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerController(overrides?: CallOverrides): Promise<string>;

    getPowerSwitch(overrides?: CallOverrides): Promise<string>;

    getVaultData(
      vault: string,
      overrides?: CallOverrides
    ): Promise<VaultDataStructOutput>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    isOffline(overrides?: CallOverrides): Promise<boolean>;

    isOnline(overrides?: CallOverrides): Promise<boolean>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    isValidAddress(target: string, overrides?: CallOverrides): Promise<boolean>;

    isValidVault(target: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    rageQuit(overrides?: CallOverrides): Promise<void>;

    registerBonusToken(
      bonusToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVaultFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVaultFactory(
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeAndClaim(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AludelCreated(address,address)"(
      rewardPool?: null,
      powerSwitch?: null
    ): AludelCreatedEventFilter;
    AludelCreated(
      rewardPool?: null,
      powerSwitch?: null
    ): AludelCreatedEventFilter;

    "AludelFunded(uint256,uint256)"(
      amount?: null,
      duration?: null
    ): AludelFundedEventFilter;
    AludelFunded(amount?: null, duration?: null): AludelFundedEventFilter;

    "BonusTokenRegistered(address)"(
      token?: null
    ): BonusTokenRegisteredEventFilter;
    BonusTokenRegistered(token?: null): BonusTokenRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RewardClaimed(address,address,uint256)"(
      vault?: null,
      token?: null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      vault?: null,
      token?: null,
      amount?: null
    ): RewardClaimedEventFilter;

    "Staked(address,uint256)"(vault?: null, amount?: null): StakedEventFilter;
    Staked(vault?: null, amount?: null): StakedEventFilter;

    "Unstaked(address,uint256)"(
      vault?: null,
      amount?: null
    ): UnstakedEventFilter;
    Unstaked(vault?: null, amount?: null): UnstakedEventFilter;

    "VaultFactoryRegistered(address)"(
      factory?: null
    ): VaultFactoryRegisteredEventFilter;
    VaultFactoryRegistered(factory?: null): VaultFactoryRegisteredEventFilter;

    "VaultFactoryRemoved(address)"(
      factory?: null
    ): VaultFactoryRemovedEventFilter;
    VaultFactoryRemoved(factory?: null): VaultFactoryRemovedEventFilter;
  };

  estimateGas: {
    BASE_SHARES_PER_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKES_PER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateReward(
      unlockedRewards: BigNumberish,
      stakeAmount: BigNumberish,
      stakeDuration: BigNumberish,
      totalStakeUnits: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardFromStakes(
      stakes: StakeDataStruct[],
      unstakeAmount: BigNumberish,
      unlockedRewards: BigNumberish,
      totalStakeUnits: BigNumberish,
      timestamp: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakeUnits(
      amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalStakeUnits(
      stakes: StakeDataStruct[],
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnlockedRewards(
      rewardSchedules: RewardScheduleStruct[],
      rewardBalance: BigNumberish,
      sharesOutstanding: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fund(
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAludelData(overrides?: CallOverrides): Promise<BigNumber>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusTokenSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTotalStakeUnits(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentUnlockedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVaultReward(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVaultStakeUnits(
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureTotalStakeUnits(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureUnlockedRewards(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureVaultReward(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureVaultStakeUnits(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerController(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerSwitch(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultData(vault: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultFactorySetLength(overrides?: CallOverrides): Promise<BigNumber>;

    isOffline(overrides?: CallOverrides): Promise<BigNumber>;

    isOnline(overrides?: CallOverrides): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVault(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeAndClaim(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_SHARES_PER_WEI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_STAKES_PER_VAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateReward(
      unlockedRewards: BigNumberish,
      stakeAmount: BigNumberish,
      stakeDuration: BigNumberish,
      totalStakeUnits: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardFromStakes(
      stakes: StakeDataStruct[],
      unstakeAmount: BigNumberish,
      unlockedRewards: BigNumberish,
      totalStakeUnits: BigNumberish,
      timestamp: BigNumberish,
      rewardScaling: RewardScalingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStakeUnits(
      amount: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalStakeUnits(
      stakes: StakeDataStruct[],
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnlockedRewards(
      rewardSchedules: RewardScheduleStruct[],
      rewardBalance: BigNumberish,
      sharesOutstanding: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fund(
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAludelData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBonusTokenAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonusTokenSetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTotalStakeUnits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUnlockedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVaultReward(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVaultStakeUnits(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureStakeReward(
      vault: string,
      stakeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureTotalStakeUnits(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureUnlockedRewards(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureVaultReward(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureVaultStakeUnits(
      vault: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerSwitch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultData(
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactoryAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultFactorySetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOffline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidAddress(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVault(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rageQuit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBonusToken(
      bonusToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVaultFactory(
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokensFromRewardPool(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeAndClaim(
      vault: string,
      amount: BigNumberish,
      permission: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
